use 'libs/stack.baabnq';
use 'libs/string.baabnq';
new ', ' _List::PRINTDELIM;

"library for liked-lists
"BIG DISCLAIMER: THIS NOT AN OPTIMAL IMPLEMENTATION
"HALF OF MEMORY IS USED FOR PTRS BUT IDC


"format for element with ElementPtr
"EPtr + 0 -> Pointer to next element
"EPtr + 1 -> element content


jump List::Skip;

    "inital element content
    lab List::Init;
        sub Stack::Swap;
        pull _List::Cont;
        
        sub List::AllocElement;
        sub Stack::Dup;
        pull _List::EPtr;
        
        put 0           -> _List::EPtr + 0;
        put _List::Cont -> _List::EPtr + 1;

        
        sub Stack::Swap;
        return;


    "system routine, don't use
    "allocs new element on the heap
    lab List::AllocElement;
        new 2 _List::EPtr;

        push _List::EPtr;
        sub Stack::Swap;
        return;

    lab List::Print;
        sub Stack::Swap;
        pull _List::EPtr;
        put _List::NPtr <- _List::EPtr + 0;
        put _List::Cont <- _List::EPtr + 1;

        print _List::Cont;

        jump List::Print::SkipPrint ~ _List::NPtr < 10;
            push _List::PRINTDELIM;
            sub String::PrintString;

            push _List::NPtr;
            sub List::Print;         

        lab List::Print::SkipPrint;   
        return;

    "EPtr
    "content
    lab List::Append;
        "evil stack magic
        sub Stack::Swap;
        pull _List::Append::Cont;
        sub Stack::Swap;
        sub Stack::Dup;
        pull _List::Append::EPtr;
        sub Stack::Swap;        

        lab List::Append::Loop;
            put _List::Append::NPtr <- _List::Append::EPtr + 0;
            jump List::Append::Found ~ _List::Append::NPtr == 0;
            put _List::Append::EPtr = _List::Append::NPtr;

        jump List::Append::Loop; 
        lab List::Append::Found;

        sub List::AllocElement;
        pull _List::Append::NPtr;

        "link new elemnt to list pointer
        put _List::Append::NPtr -> _List::Append::EPtr + 0;

        "put data into new element
        put 0                   -> _List::Append::NPtr + 0;        
        put _List::Append::Cont -> _List::Append::NPtr + 1;

        return;


lab List::Skip;


push 10;
sub List::Init;

push 20;
sub List::Append;

push 30;
sub List::Append;

push 40;
sub List::Append;


sub List::Print;
