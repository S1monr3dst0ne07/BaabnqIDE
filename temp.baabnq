"translated form: http://rosettacode.org/wiki/Mandelbrot_set#B
"BUGGY AF, NEGATIVS NOT HANDLED COREECTLY







use 'libs/math.baabnq';
use 'libs/stack.baabnq';    

put _cx = 0;
put _cy = 0;
put _x  = 0;
put _y  = 0;
put _x2 = 0;
put _y2 = 0;

put _iter = 0;

put _xmin    = (8601 ^ (0 - 1)) + 1;
put _xmax    = 2867;
put _ymin    = (4915 ^ (0 - 1)) + 1;
put _ymax    = 4915;
put _maxiter = 0;
put _dx      = 0;
put _dy      = 0;

put _maxiter = 32;

push (_xmax - _xmin);
push 79;
sub Math::Div;
pull _dx;

push (_ymax - _ymin);
push 24;
sub Math::Div;
pull _dy;


put _cy = _ymin;
lab While1;
    push _cy; push _ymax;
    sub Val1>Val2;
    pull _CompTempVal;
    jump Exit1 ~ _CompTempVal == 1;
    put _cx = _xmin;
    
    lab While2;
        push _cx; push _xmax;
        sub Val1>Val2;
        pull _CompTempVal;
        jump Exit2 ~ _CompTempVal == 1;
        
        "print _cx;

        put _x = 0;
        put _y = 0;
        put _x2 = 0;
        put _y2 = 0;
        put _iter = 0;
        
        lab While3;
            jump Exit3 ~ _iter > _maxiter;

            "print _x;
            "print _y;

            push _x2 + _y2; push 16384;
            sub Val1>Val2;
            pull _CompTempVal;
            jump Exit3 ~ _CompTempVal == 1;
            

            push _x; push _y; sub Mul; pull _Temp;
            print _Temp;
            put _y = (_Temp >> 11) + _cy;
            put _x = (_x2 - _y2) + _cx;
            
            push _x; push _x; sub Mul; pull _Temp;
            put _x2 = _Temp >> 12;
            
            push _y; push _y; sub Mul; pull _Temp;
            put _y2 = _Temp >> 12;
            
            put _iter = _iter + 1;
        
            jump While3;
        lab Exit3;
        
        putchr _iter + 32;
        
        put _cx = _cx + _dx;
        
    jump While2;
    lab Exit2;

    putchr 10;
    put _cy = _cy + _dy;


    jump While1;
lab Exit1;


jump Exit;
    lab Val1>Val2;
        sub Stack::Swap;
        pull _Val1>Val2::Val2;
        sub Stack::Swap;
        pull _Val1>Val2::Val1;

        put _Val1>Val2::Sign1 = _Val1>Val2::Val1 & (1 << 15);
        put _Val1>Val2::Sign2 = _Val1>Val2::Val2 & (1 << 15);

        "if the sign of the inputs are not the same, just compare the two
        jump Val1>Val2::QuickSign ~ _Val1>Val2::Sign1 != _Val1>Val2::Sign2;

        "handle negativ
        jump Val1>Val2::Neg ~ _Val1>Val2::Sign1 == 1;

        "normal check
        put _Val1>Val2::Output = 1;
        jump Val1>Val2::Exit ~ _Val1>Val2::Val1 > _Val1>Val2::Val2; 
            put _Val1>Val2::Output = 0;
        lab Val1>Val2::Exit;

        push _Val1>Val2::Output;
        sub Stack::Swap;
        return;

    lab Val1>Val2::Neg;
        put _Val1>Val2::Val1 = (_Val1>Val2::Val1 ^ (0 - 1)) + 1;
        put _Val1>Val2::Val2 = (_Val1>Val2::Val2 ^ (0 - 1)) + 1;

        put _Val1>Val2::Output = 1;
        jump Val1>Val2::Neg::Exit ~ _Val1>Val2::Val1 < _Val1>Val2::Val2; 
            put _Val1>Val2::Output = 0;
        lab Val1>Val2::Neg::Exit;

        push _Val1>Val2::Output;
        sub Stack::Swap;
        return;


    lab Val1>Val2::QuickSign;
        put _Val1>Val2::Output = 1;
        jump Val1>Val2::QuickSign::Exit ~ _Val1>Val2::Sign1 < _Val1>Val2::Sign2; 
            put _Val1>Val2::Output = 0;
        lab Val1>Val2::QuickSign::Exit;
        push _Val1>Val2::Output;
        sub Stack::Swap;
        return;



    lab Mul;
        sub Stack::Swap;
        pull _Mul::X;
        sub Stack::Swap;
        pull _Mul::Y;

        put _Mul::Sx = _Mul::X & (1 << 15);
        put _Mul::Sy = _Mul::Y & (1 << 15);

        jump Mul::SkipSignX ~ _Mul::Sx == 0;
            put _Mul::X = _Mul::X - 1 ^ (0 - 1);
        lab Mul::SkipSignX;

        jump Mul::SkipSignY ~ _Mul::Sy == 0;
            put _Mul::Y = _Mul::Y - 1 ^ (0 - 1);    
        lab Mul::SkipSignY;

        push _Mul::X;        
        push _Mul::Y;
        sub Math::Mul;
        pull _Mul::Temp;        

        put _Mul::Sign = _Mul::Sx ^ _Mul::Sy;
        jump Mul::SkipSign ~ _Mul::Sign == 0;
            put _Mul::Temp = (_Mul::Temp ^ (0 - 1)) + 1;
        lab Mul::SkipSign;
        
        push _Mul::Temp;
        sub Stack::Swap;
        return;        


lab Exit;










